trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  webAppName: 'r3d-r3dc7z'

stages:

- stage: Build_Test
  displayName: Build
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: NuGetToolInstaller@1
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'
    - task: VSBuild@1
      displayName: 'Build'
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    - task: DotNetCoreCLI@2
      displayName: 'Install Report Generator'
      inputs:
        command: custom
        custom: tool
        arguments: 'install --global dotnet-reportgenerator-globaltool'
    - task: DotNetCoreCLI@2
      displayName: 'Run UnitTest'
      inputs:
        command: 'test'
        projects: '**/AdventureWorks.Tests.csproj'
        arguments: ' --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/"'
        nobuild: true
        publishTestResults: true
    - script: |
          reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
      displayName: 'Create Code Coverage Report'
    - task: PublishCodeCoverageResults@1
      displayName: 'Publih Code Coverage Report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
        failIfCoverageEmpty: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publih Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'buildArtifact'

#- stage: Deploy
#  displayName: Deploy
#  jobs:
#  - job: Deploy
#    displayName: Deploy
#    steps:
#    - task: DownloadBuildArtifacts@0
#      inputs:
#        buildType: 'current'
#        downloadType: 'single'
#        artifactName: 'buildArtifact'
#        downloadPath: '$(Build.ArtifactStagingDirectory)'
#    - task: AzureRmWebAppDeployment@4
#      inputs:
#        ConnectionType: 'AzureRM'
#        azureSubscription: 'Visual Studio Professional(dda2a232-c1b2-433a-a1e5-1d8086dd0e30)'
#        appType: 'webApp'
#        WebAppName: $(webAppName)
#        Package: '$(Build.ArtifactStagingDirectory)\**\WebApp.zip'